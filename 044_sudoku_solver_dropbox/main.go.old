package main

import (
	"fmt"
	"strconv"
)

type Board [9][9]int
type Box [9]int

func (b Box) String() string {

	str := ""
	for i := 0; i < len(b); i++ {
		if i != 0 {
			if (i % 3) == 0 {
				str += "\n"
			} else {
				str += " "
			}
		}
		str += strconv.Itoa(b[i])
	}

	return str
}

func (b Box) Valid() bool {

	exist := map[int]bool{}
	for i := 0; i < len(b); i++ {
		v := b[i]
		if v == 0 {
			continue
		}

		_, ok := exist[v]
		if ok {
			return false
		}

		exist[v] = true
	}

	return true
}

func (b Board) Valid() bool {

	x := 0
	for i := 0; i < 9; i++ {
		if (i%3) == 0 && i != 0 {
			x += 19
		} else {
			if i != 0 {
				x += 4
			}
		}

		box := b.GetBox(x)
		if !box.Valid() {
			return false
		}
	}

	for i := 0; i < 9; i++ {

		row := map[int]bool{}
		col := map[int]bool{}

		for j := 0; j < 9; j++ {
			v := b[i][j]
			if v > 0 {
				_, ok := row[v]
				if ok {
					return false
				}
				row[v] = true
			}

			v = b[j][i]
			if v > 0 {
				_, ok := col[v]
				if ok {
					return false
				}
				col[v] = true
			}
		}
	}

	return true
}

func (b Board) GetBox(i int) Box {

	getstart := func(x int) int {
		start := -1
		if x >= 0 && x <= 2 {
			start = 0
			// left
		} else if x >= 3 && x <= 5 {
			start = 3
			// center
		} else if x >= 6 && x <= 8 {

			start = 6
			// right
		}
		return start
	}

	row := getstart(i / 9)
	col := getstart(i % 9)

	box := [9]int{}
	num := 0

	for j := row; j <= (row + 2); j++ {
		for k := col; k <= (col + 2); k++ {
			box[num] = b[j][k]
			num++
		}
	}

	return box
}

func (b Board) String() string {

	str := ""

	for i := 0; i < len(b); i++ {
		for j := 0; j < len(b); j++ {

			v := b[i][j]
			str += fmt.Sprintf("%d", v)

			x := j + 1

			if j >= 0 {
				if (x % 3) == 0 {
					if x < len(b) {
						str += fmt.Sprint(" | ")
					}
				} else {
					str += fmt.Sprint(" ")
				}
			}
		}

		x := i + 1
		if x < len(b) {
			str += fmt.Sprintln()
			if (x % 3) == 0 {
				str += fmt.Sprintln()
			}
		}
	}

	return str
}

// assume it's valid by default
func solve(b Board) Board {

	num := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}
	if !b.Valid() {
		fmt.Println("invalid")
	}

	for i := 0; i < len(b); i++ {
		exist := map[int]bool{}
		for j := 0; j < len(b); j++ {
			v := b[i][j]
			if v == 0 {
				for _, n := range num {
					_, ok := exist[v]
					if !ok {
						b[i][j] = n
						if b.Valid() {
							exist[n] = true
							break
						} else {
							b[i][j] = 0
						}
					}
				}
			} else {
				exist[v] = true
			}
		}
	}

	return b
}

func main() {
	b := Board{}
	b[0][0] = 1
	b[4][0] = 9
	b[1][4] = 2
	b[2][8] = 3
	b[3][0] = 4
	b[4][4] = 5
	b[5][8] = 6
	b[6][0] = 7
	b[7][4] = 8
	b[8][8] = 9

	b = solve(b)
	fmt.Println(b)
}
